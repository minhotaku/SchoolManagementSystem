@using Microsoft.AspNetCore.Http

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - School Management System Administration</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">

    <style>
        /* Dashboard Layout CSS */
        :root {
            --primary-color: #3a57e8;
            --secondary-color: #1aa053;
            --danger-color: #c03221;
            --warning-color: #f16a1b;
            --info-color: #079aa2;
            --dark-color: #212529;
            --light-color: #f9f9f9;
            --sidebar-width: 260px;
            --header-height: 60px;
            --transition-speed: 0.3s;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f5f6fa;
            overflow-x: hidden;
            position: relative;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .admin-sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100%;
            width: var(--sidebar-width);
            background: var(--dark-color);
            color: white;
            z-index: 1040;
            transition: all var(--transition-speed) ease;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow-y: auto;
            overflow-x: hidden;
        }

            .admin-sidebar.collapsed {
                width: 70px;
            }

            .admin-sidebar .logo-container {
                display: flex;
                align-items: center;
                padding: 1rem;
                height: var(--header-height);
                border-bottom: 1px solid rgba(255,255,255,0.1);
            }

                .admin-sidebar .logo-container img {
                    height: 40px;
                    width: auto;
                }

            .admin-sidebar .logo-text {
                margin-left: 10px;
                font-weight: 600;
                white-space: nowrap;
                overflow: hidden;
                transition: opacity var(--transition-speed);
            }

            .admin-sidebar.collapsed .logo-text {
                opacity: 0;
                width: 0;
            }

        .nav-menu {
            padding: 0.5rem;
            list-style: none;
        }

        .nav-menu-item {
            margin-bottom: 5px;
        }

        .nav-menu-link {
            display: flex;
            align-items: center;
            color: rgba(255,255,255,0.8);
            padding: 10px 15px;
            border-radius: 5px;
            text-decoration: none;
            transition: all var(--transition-speed);
        }

            .nav-menu-link:hover, .nav-menu-link.active {
                background-color: rgba(255,255,255,0.1);
                color: white;
            }

            .nav-menu-link i {
                min-width: 25px;
                margin-right: 10px;
                font-size: 1.1rem;
            }

        .nav-menu-text {
            white-space: nowrap;
            overflow: hidden;
            transition: opacity var(--transition-speed);
        }

        .admin-sidebar.collapsed .nav-menu-text {
            opacity: 0;
            width: 0;
        }

        .menu-divider {
            height: 1px;
            background-color: rgba(255,255,255,0.1);
            margin: 15px 0;
        }

        .submenu {
            max-height: 0;
            overflow: hidden;
            padding-left: 35px;
            transition: max-height var(--transition-speed) ease;
        }

            .submenu.open {
                max-height: 300px; /* Maximum height limit */
                overflow-y: auto; /* Show scrollbar when needed */
            }

            /* Add scrollbar style for submenu */
            .submenu::-webkit-scrollbar {
                width: 4px;
            }

            .submenu::-webkit-scrollbar-track {
                background: rgba(255,255,255,0.05);
            }

            .submenu::-webkit-scrollbar-thumb {
                background: rgba(255,255,255,0.2);
                border-radius: 4px;
            }

        .has-submenu {
            position: relative;
        }

            .has-submenu .dropdown-icon {
                position: absolute;
                right: 15px;
                transition: transform var(--transition-speed);
            }

            .has-submenu.open .dropdown-icon {
                transform: rotate(180deg);
            }

        /* Main Content Area */
        .admin-content {
            margin-left: var(--sidebar-width);
            transition: margin var(--transition-speed) ease;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

            .admin-content.expanded {
                margin-left: 70px;
            }

        /* Header Styles */
        .admin-header {
            height: var(--header-height);
            background-color: white;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            align-items: center;
            padding: 0 1.5rem;
            position: sticky;
            top: 0;
            z-index: 1030;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        .toggle-sidebar {
            background: none;
            border: none;
            color: var(--dark-color);
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .breadcrumb-container {
            margin-left: 1rem;
            flex-grow: 1;
        }

        .breadcrumb {
            margin-bottom: 0;
        }

        .admin-header .user-menu {
            display: flex;
            align-items: center;
        }

            .admin-header .user-menu .dropdown-toggle {
                display: flex;
                align-items: center;
                background: none;
                border: none;
                color: var(--dark-color);
            }

            .admin-header .user-menu .avatar {
                width: 36px;
                height: 36px;
                border-radius: 50%;
                background-color: var(--primary-color);
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: 600;
                margin-right: 10px;
            }

        /* Main Container */
        .main-container {
            padding: 1.5rem;
            flex-grow: 1;
        }

        /* Dashboard Cards */
        .dashboard-card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .dashboard-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }

        .card-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
            color: white;
        }

            .card-icon.primary {
                background-color: var(--primary-color);
            }

            .card-icon.success {
                background-color: var(--secondary-color);
            }

            .card-icon.warning {
                background-color: var(--warning-color);
            }

            .card-icon.danger {
                background-color: var(--danger-color);
            }

            .card-icon.info {
                background-color: var(--info-color);
            }

        .card-title {
            font-size: 1rem;
            color: #6c757d;
            margin-bottom: 0.5rem;
        }

        .card-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark-color);
        }

        /* Tables */
        .custom-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

            .custom-table th {
                background-color: #f8f9fa;
                padding: 12px 15px;
                border-bottom: 1px solid #e9ecef;
                font-weight: 600;
                color: #495057;
            }

            .custom-table td {
                padding: 12px 15px;
                border-bottom: 1px solid #e9ecef;
                vertical-align: middle;
            }

            .custom-table tr:last-child td {
                border-bottom: none;
            }

            .custom-table tr:hover {
                background-color: #f8f9fa;
            }

        /* Badges */
        .status-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 50px;
            font-size: 0.75rem;
            font-weight: 600;
        }

            .status-badge.active {
                background-color: rgba(26, 160, 83, 0.1);
                color: var(--secondary-color);
            }

            .status-badge.pending {
                background-color: rgba(241, 106, 27, 0.1);
                color: var(--warning-color);
            }

            .status-badge.inactive {
                background-color: rgba(192, 50, 33, 0.1);
                color: var(--danger-color);
            }

        /* Footer */
        .admin-footer {
            background-color: white;
            padding: 1rem 1.5rem;
            border-top: 1px solid #e9ecef;
            font-size: 0.875rem;
            color: #6c757d;
        }

        /* Responsive Adjustments */
        @@media (max-width: 991.98px) {
            .admin-sidebar {
                transform: translateX(-100%);
                box-shadow: none;
            }

                .admin-sidebar.show {
                    transform: translateX(0);
                    box-shadow: 0 0 15px rgba(0,0,0,0.1);
                }

            .admin-content {
                margin-left: 0 !important;
            }

            .mobile-overlay {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(0,0,0,0.5);
                z-index: 1035;
                display: none;
            }

                .mobile-overlay.show {
                    display: block;
                }
        }

        /* Animations */
        @@keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        .fade-in {
            animation: fadeIn 0.3s ease;
        }
    </style>

    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <!-- Mobile Overlay -->
    <div class="mobile-overlay" id="mobileOverlay"></div>

    <!-- Sidebar -->
    <aside class="admin-sidebar" id="adminSidebar">
        <div class="logo-container">
            <i class="bi bi-mortarboard-fill fs-3"></i>
            <span class="logo-text">School Management System</span>
        </div>

        <ul class="nav-menu p-0">
            <li class="nav-menu-item">
                <a href="/AdminDashboard/Index" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "AdminDashboard" && ViewContext.RouteData.Values["action"].ToString() == "Index" ? "active" : "")">
                    <i class="bi bi-speedometer2"></i>
                    <span class="nav-menu-text">Dashboard</span>
                </a>
            </li>

            <!-- User Management Section -->
            <li class="nav-menu-item">
                <a href="#" class="nav-menu-link has-submenu @(ViewContext.RouteData.Values["controller"].ToString() == "UserManagement" || ViewContext.RouteData.Values["controller"].ToString() == "AdminManagement" ? "active" : "")" id="userManagementToggle">
                    <i class="bi bi-people"></i>
                    <span class="nav-menu-text">User Management</span>
                    <i class="bi bi-chevron-down dropdown-icon"></i>
                </a>
                <ul class="submenu @(ViewContext.RouteData.Values["controller"].ToString() == "UserManagement" || ViewContext.RouteData.Values["controller"].ToString() == "AdminManagement" ? "open" : "")" id="userManagementSubMenu">
                    <li class="nav-menu-item">
                        <a href="/UserManagement/Index" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "UserManagement" && ViewContext.RouteData.Values["action"].ToString() == "Index" ? "active" : "")">
                            <i class="bi bi-person"></i>
                            <span class="nav-menu-text">User List</span>
                        </a>
                    </li>
                    <li class="nav-menu-item">
                        <a href="/UserManagement/Register" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "UserManagement" && ViewContext.RouteData.Values["action"].ToString() == "Register" ? "active" : "")">
                            <i class="bi bi-person-plus"></i>
                            <span class="nav-menu-text">Register User</span>
                        </a>
                    </li>
                    <li class="nav-menu-item">
                        <a href="/AdminManagement/Index" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "AdminManagement" ? "active" : "")">
                            <i class="bi bi-shield-lock"></i>
                            <span class="nav-menu-text">Admin Management</span>
                        </a>
                    </li>
                </ul>
            </li>

            <!-- Student Management Section -->
            <li class="nav-menu-item">
                <a href="/StudentManagement/Index" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "StudentManagement" ? "active" : "")">
                    <i class="bi bi-mortarboard"></i>
                    <span class="nav-menu-text">Student Management</span>
                </a>
            </li>

            <!-- Course Management Section -->
            <li class="nav-menu-item">
                <a href="#" class="nav-menu-link has-submenu @(ViewContext.RouteData.Values["controller"].ToString() == "CourseManagement" || ViewContext.RouteData.Values["controller"].ToString() == "EnrollmentManagement" ? "active" : "")" id="courseManagementToggle">
                    <i class="bi bi-book"></i>
                    <span class="nav-menu-text">Course Management</span>
                    <i class="bi bi-chevron-down dropdown-icon"></i>
                </a>
                <ul class="submenu @(ViewContext.RouteData.Values["controller"].ToString() == "CourseManagement" || ViewContext.RouteData.Values["controller"].ToString() == "EnrollmentManagement" ? "open" : "")" id="courseManagementSubMenu">
                    <li class="nav-menu-item">
                        <a href="/CourseManagement/Index" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "CourseManagement" && ViewContext.RouteData.Values["action"].ToString() == "Index" ? "active" : "")">
                            <i class="bi bi-list-ul"></i>
                            <span class="nav-menu-text">Course List</span>
                        </a>
                    </li>
                    <li class="nav-menu-item">
                        <a href="/EnrollmentManagement/Index" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "EnrollmentManagement" ? "active" : "")">
                            <i class="bi bi-clipboard-check"></i>
                            <span class="nav-menu-text">Enrollment Management</span>
                        </a>
                    </li>
                </ul>
            </li>

            <!-- Faculty Management Section -->
            <li class="nav-menu-item">
                <a href="/FacultyManagement/Index" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "FacultyManagement" ? "active" : "")">
                    <i class="bi bi-building"></i>
                    <span class="nav-menu-text">Faculty Management</span>
                </a>
            </li>

            <!-- Program Management Section -->
            <li class="nav-menu-item">
                <a href="#" class="nav-menu-link has-submenu @(ViewContext.RouteData.Values["controller"].ToString() == "SchoolProgram" ? "active" : "")" id="programManagementToggle">
                    <i class="bi bi-journal-text"></i>
                    <span class="nav-menu-text">School Program</span>
                    <i class="bi bi-chevron-down dropdown-icon"></i>
                </a>
                <ul class="submenu @(ViewContext.RouteData.Values["controller"].ToString() == "SchoolProgram" ? "open" : "")" id="programManagementSubMenu">
                    <li class="nav-menu-item">
                        <a href="/SchoolProgram/Index" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "SchoolProgram" && ViewContext.RouteData.Values["action"].ToString() == "Index" ? "active" : "")">
                            <i class="bi bi-list-check"></i>
                            <span class="nav-menu-text">Program List</span>
                        </a>
                    </li>
                </ul>
            </li>

            <!-- Reports Section -->
            <li class="nav-menu-item">
                <a href="#" class="nav-menu-link has-submenu @(ViewContext.RouteData.Values["controller"].ToString() == "Reports" ? "active" : "")" id="reportsToggle">
                    <i class="bi bi-graph-up"></i>
                    <span class="nav-menu-text">Reports</span>
                    <i class="bi bi-chevron-down dropdown-icon"></i>
                </a>
                <ul class="submenu @(ViewContext.RouteData.Values["controller"].ToString() == "Reports" ? "open" : "")" id="reportsSubMenu">
                    <li class="nav-menu-item">
                        <a href="/Reports/CourseEnrollmentReport" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "Reports" && ViewContext.RouteData.Values["action"].ToString() == "CourseEnrollmentReport" ? "active" : "")">
                            <i class="bi bi-bar-chart"></i>
                            <span class="nav-menu-text">Enrollment Report</span>
                        </a>
                    </li>
                    <li class="nav-menu-item">
                        <a href="/Reports/GradeReport" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "Reports" && ViewContext.RouteData.Values["action"].ToString() == "GradeReport" ? "active" : "")">
                            <i class="bi bi-card-checklist"></i>
                            <span class="nav-menu-text">Grade Report</span>
                        </a>
                    </li>
                    <li class="nav-menu-item">
                        <a href="/Reports/StudentProgressReport" class="nav-menu-link @(ViewContext.RouteData.Values["controller"].ToString() == "Reports" && ViewContext.RouteData.Values["action"].ToString() == "StudentProgressReport" ? "active" : "")">
                            <i class="bi bi-arrow-up-right"></i>
                            <span class="nav-menu-text">Student Progress</span>
                        </a>
                    </li>
                </ul>
            </li>

            <div class="menu-divider"></div>

            <!-- Settings Section -->
            <li class="nav-menu-item">
                <a href="#" class="nav-menu-link">
                    <i class="bi bi-gear"></i>
                    <span class="nav-menu-text">System Settings</span>
                </a>
            </li>

            <!-- Help Section -->
            <li class="nav-menu-item">
                <a href="#" class="nav-menu-link">
                    <i class="bi bi-question-circle"></i>
                    <span class="nav-menu-text">Help</span>
                </a>
            </li>
        </ul>
    </aside>

    <!-- Main Content -->
    <div class="admin-content" id="adminContent">
        <!-- Header -->
        <header class="admin-header">
            <button class="toggle-sidebar" id="toggleSidebar">
                <i class="bi bi-list"></i>
            </button>


            <!-- Breadcrumbs -->
            <div class="breadcrumb-container">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        @if (ViewContext.RouteData.Values["controller"].ToString() == "AdminDashboard" && ViewContext.RouteData.Values["action"].ToString() == "Index")
                        {
                            <li class="breadcrumb-item active">Dashboard</li>
                        }
                        else
                        {
                            <li class="breadcrumb-item active">@(String.Join(" ", System.Text.RegularExpressions.Regex.Split(ViewContext.RouteData.Values["controller"].ToString(), @"(?<!^)(?=[A-Z])"))) </li>
                        }
                    </ol>
                </nav>
            </div>

            <!-- User Menu -->
            <div class="user-menu dropdown">
                @{
                    // Lấy thông tin người dùng từ Session
                    var currentUsername = Context.Session.GetString("_Username") ?? "minhotaku"; // Fallback to provided username
                    var currentUserRole = Context.Session.GetString("_UserRole") ?? "Admin";
                    var avatarInitial = !string.IsNullOrEmpty(currentUsername) ? currentUsername.Substring(0, 1).ToUpper() : "U";
                }

                <button class="dropdown-toggle" type="button" id="userMenuDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <div class="avatar">
                        @avatarInitial
                    </div>
                    <div class="d-none d-md-block">
                        <div class="fw-bold">@currentUsername</div>
                        <div class="small text-muted">@currentUserRole</div>
                    </div>
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenuDropdown">
                    <li><a class="dropdown-item" href="#"><i class="bi bi-person me-2"></i>Profile</a></li>
                    <li><a class="dropdown-item" href="#"><i class="bi bi-gear me-2"></i>Settings</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li>
                        <form asp-controller="Account" asp-action="Logout" method="post" id="logoutForm" class="form-inline">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="dropdown-item">
                                <i class="bi bi-box-arrow-right me-2"></i>Logout
                            </button>
                        </form>
                    </li>
                </ul>
            </div>
        </header>

        <!-- Main Container -->
        <div class="main-container">
            @RenderBody()
        </div>

        <!-- Footer -->
        <footer class="admin-footer">
            <div class="row">
                <div class="col-md-6">
                    © @DateTime.Now.Year - School Management System - <a href="#">Privacy Policy</a>
                </div>
                <div class="col-md-6 text-md-end">
                    Server time (UTC): <span id="currentDateTime">2025-03-31 14:17:27</span>
                </div>
            </div>
        </footer>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
           document.addEventListener('DOMContentLoaded', () => {
            // --- DOM Elements ---
            const adminSidebar = document.getElementById('adminSidebar');
            const adminContent = document.getElementById('adminContent');
            const toggleSidebarBtn = document.getElementById('toggleSidebar');
            const mobileOverlay = document.getElementById('mobileOverlay');
            const submenuToggles = document.querySelectorAll('.has-submenu');
            const allSubmenus = document.querySelectorAll('.submenu'); // Get all submenus
            const allSidebarLinks = adminSidebar.querySelectorAll('a'); // Get all links in sidebar

            // --- Constants ---
            const ACTIVE_SUBMENUS_KEY = 'activeSubmenus'; // Key for localStorage

            // --- Function to close all submenus ---
            // (This function remains the same, useful when collapsing sidebar)
            function closeAllSubmenus() {
                allSubmenus.forEach(submenu => {
                    submenu.classList.remove('open');
                    const toggle = submenu.previousElementSibling;
                    if (toggle && toggle.classList.contains('has-submenu')) {
                        toggle.classList.remove('open');
                    }
                });
                // Clear saved state when actively closing all
                localStorage.removeItem(ACTIVE_SUBMENUS_KEY);
            }

            // --- Function to close a specific submenu ---
            // This function will be used more often
            function closeSpecificSubmenu(submenuToClose) {
                if (submenuToClose && submenuToClose.classList.contains('open')) {
                     submenuToClose.classList.remove('open');
                     const toggle = submenuToClose.previousElementSibling;
                     if (toggle && toggle.classList.contains('has-submenu')) {
                         toggle.classList.remove('open');
                     }
                     // After closing, update the stored state
                     saveOpenSubmenusState();
                }
            }


            // --- Function to save the state of open submenus ---
            // Only save up to 1 ID
            function saveOpenSubmenusState() {
                const activeSubmenuIds = [];
                const openSubmenu = adminSidebar.querySelector('.submenu.open'); // Query within sidebar
                if (openSubmenu && openSubmenu.id) {
                    activeSubmenuIds.push(openSubmenu.id);
                } else if (openSubmenu && !openSubmenu.id) {
                    console.warn("Open submenu does not have an ID, cannot save state:", openSubmenu);
                }
                localStorage.setItem(ACTIVE_SUBMENUS_KEY, JSON.stringify(activeSubmenuIds));
            }

            // --- Function to restore submenu state from localStorage ---
            // (This function remains the same)
            function restoreOpenSubmenusState() {
                const savedSubmenuIds = JSON.parse(localStorage.getItem(ACTIVE_SUBMENUS_KEY) || '[]');
                if (savedSubmenuIds && savedSubmenuIds.length > 0) {
                    savedSubmenuIds.forEach(submenuId => {
                        const submenu = document.getElementById(submenuId);
                        if (submenu) {
                            submenu.classList.add('open');
                            const toggle = submenu.previousElementSibling;
                            if (toggle && toggle.classList.contains('has-submenu')) {
                                toggle.classList.add('open');
                            }
                        }
                    });
                }
            }

            // --- Restore submenu state when page loads ---
            const isDesktop = window.innerWidth >= 992;
            if (!isDesktop || (isDesktop && adminSidebar && !adminSidebar.classList.contains('collapsed'))) {
                restoreOpenSubmenusState();
            }


            // --- Toggle Sidebar ---
            if (toggleSidebarBtn) {
                toggleSidebarBtn.addEventListener('click', () => {
                    const isMobile = window.innerWidth < 992;

                    if (isMobile) {
                        adminSidebar.classList.toggle('show');
                        mobileOverlay.classList.toggle('show');
                    } else {
                        adminSidebar.classList.toggle('collapsed');
                        adminContent.classList.toggle('expanded');

                        if (adminSidebar.classList.contains('collapsed')) {
                            // When collapsed, close all and clear saved state
                            closeAllSubmenus();
                        } else {
                            // When expanded again, restore (if any)
                            restoreOpenSubmenusState();
                        }
                    }
                });
            }

            // --- Close Mobile Sidebar when Overlay Clicked ---
            if (mobileOverlay) {
                mobileOverlay.addEventListener('click', () => {
                    adminSidebar.classList.remove('show');
                    mobileOverlay.classList.remove('show');
                });
            }

            // --- Submenu Toggle Logic (ONLY ONE SUBMENU OPEN) ---
            submenuToggles.forEach(toggle => {
                // Ensure ID for submenu (important for saving/restoring)
                const submenu = toggle.nextElementSibling;
                if (submenu && submenu.classList.contains('submenu') && !submenu.id) {
                    const generatedId = 'submenu-' + (toggle.getAttribute('href') || toggle.textContent.trim().replace(/\s+/g, '-') || Math.random().toString(36).substring(7));
                    submenu.id = generatedId;
                    console.warn("Submenu was automatically assigned ID:", generatedId, submenu);
                }

                toggle.addEventListener('click', (e) => {
                    e.preventDefault(); // Prevent <a> tag from navigating

                    const currentSubmenu = toggle.nextElementSibling;

                    if (!currentSubmenu || !currentSubmenu.classList.contains('submenu')) {
                        console.error("Valid .submenu not found after toggle:", toggle);
                        return;
                    }

                    const isCurrentlyOpen = currentSubmenu.classList.contains('open');

                    // Find and close *other* open submenu (if any)
                    const currentlyOpenSubmenu = adminSidebar.querySelector('.submenu.open');
                    if (currentlyOpenSubmenu && currentlyOpenSubmenu !== currentSubmenu) {
                         closeSpecificSubmenu(currentlyOpenSubmenu); // Use new function
                    }

                    // Now, decide state for the clicked one
                    if (isCurrentlyOpen) {
                        // If it's open, then close it
                        currentSubmenu.classList.remove('open');
                        toggle.classList.remove('open');
                    } else {
                        // If it's closed, then open it
                        currentSubmenu.classList.add('open');
                        toggle.classList.add('open');
                    }

                    // Save the final state to localStorage
                    saveOpenSubmenusState();
                });
            });

            // --- *** NEW: Close submenu when clicking on another item *** ---
            adminSidebar.addEventListener('click', (event) => {
                const clickedElement = event.target;

                // Check if any submenu is currently open
                const openSubmenu = adminSidebar.querySelector('.submenu.open');

                // If no submenu is open, no need to do anything
                if (!openSubmenu) {
                    return;
                }

                // Check if the click is on the toggle of the currently open submenu
                const openSubmenuToggle = openSubmenu.previousElementSibling;
                if (openSubmenuToggle && openSubmenuToggle.contains(clickedElement)) {
                    // Clicked on the toggle itself -> the toggle's listener will handle open/close toggle
                    return;
                }

                // Check if the click is INSIDE the currently open submenu
                if (openSubmenu.contains(clickedElement)) {
                    // Clicked on a link/item inside the open submenu, do not close it
                    return;
                }

                // Check if clicked on a toggle OF ANOTHER SUBMENU
                const clickedToggle = clickedElement.closest('.has-submenu');
                if (clickedToggle) {
                    // Clicked on another toggle -> that toggle's listener will handle closing the old one, opening the new one
                    return;
                }

                // --- SUBMENU CLOSING CONDITION ---
                // If reached here, it means:
                // 1. There is an open submenu.
                // 2. Click is NOT on the toggle of that submenu.
                // 3. Click is NOT inside that submenu.
                // 4. Click is NOT on another submenu toggle.
                // => Clicked on a regular item or empty space in the sidebar.
                // --> Proceed to close the currently open submenu.
                closeSpecificSubmenu(openSubmenu); // Use new function and it automatically saves state
            });


            // --- Responsive Adjustments ---
            window.addEventListener('resize', () => {
                const isMobile = window.innerWidth < 992;
                const sidebarIsCollapsed = adminSidebar.classList.contains('collapsed');
                const sidebarIsShowingMobile = adminSidebar.classList.contains('show');

                if (isMobile) {
                    // Switching to mobile
                    if (sidebarIsCollapsed) {
                        adminSidebar.classList.remove('collapsed'); // Remove collapsed on mobile
                        adminContent.classList.remove('expanded');
                    }
                    if (sidebarIsShowingMobile) {
                        mobileOverlay.classList.add('show');
                    } else {
                        mobileOverlay.classList.remove('show');
                    }
                    // No need to close submenu when resizing to mobile, keep current state
                } else {
                    // Switching to desktop
                    adminSidebar.classList.remove('show'); // Turn off mobile show state
                    mobileOverlay.classList.remove('show');
                    if (sidebarIsCollapsed) {
                        // If in collapsed state on desktop, ensure submenus are closed (no need to save state)
                        document.querySelectorAll('.submenu.open').forEach(submenu => {
                            submenu.classList.remove('open');
                            const toggle = submenu.previousElementSibling;
                            if (toggle && toggle.classList.contains('has-submenu')) {
                                toggle.classList.remove('open');
                            }
                        });
                    }
                    // If not collapsed, submenu state is managed by restore/save
                }
            });

            // --- Server Time Update ---
            function updateCurrentTime() {
                const now = new Date();
                const year = now.getUTCFullYear();
                const month = String(now.getUTCMonth() + 1).padStart(2, '0');
                const day = String(now.getUTCDate()).padStart(2, '0');
                const hours = String(now.getUTCHours()).padStart(2, '0');
                const minutes = String(now.getUTCMinutes()).padStart(2, '0');
                const seconds = String(now.getUTCSeconds()).padStart(2, '0');
                const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                const timeElement = document.getElementById('currentDateTime');
                if (timeElement) {
                    timeElement.textContent = formattedDate;
                }
            }
            updateCurrentTime();
            setInterval(updateCurrentTime, 1000);

        }); // End of DOMContentLoaded
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>