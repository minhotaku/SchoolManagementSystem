@model SchoolManagementSystem.Entities.User
@{
    ViewData["Title"] = "Register New User";
    // Current date and time: 2025-03-27 15:22:04
    // Current user: minhotaku
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
                    <li class="breadcrumb-item"><a asp-action="Index">User Management</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Register New User</li>
                </ol>
            </nav>

            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="bi bi-person-plus-fill me-2"></i>Register New User</h4>
                </div>
                <div class="card-body">
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i> @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <form asp-action="Register" method="post" class="needs-validation" novalidate>
                        <div class="mb-3">
                            <label for="username" class="form-label fw-bold required">Username</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-person"></i></span>
                                <input type="text" class="form-control" id="username" name="username" required
                                       placeholder="Enter username">
                            </div>
                            <div class="form-text">Username must be unique in the system.</div>
                            <div class="invalid-feedback">Please enter username.</div>
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label fw-bold required">Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-lock"></i></span>
                                <input type="password" class="form-control" id="password" name="password" required
                                       placeholder="Enter password">
                                <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                            <div class="form-text">Password should be at least 8 characters and include uppercase, lowercase letters and numbers.</div>
                            <div class="invalid-feedback">Please enter password.</div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label fw-bold required">Confirm Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
                                <input type="password" class="form-control" id="confirmPassword" required
                                       placeholder="Re-enter password">
                            </div>
                            <div class="invalid-feedback">Passwords do not match.</div>
                        </div>

                        <div class="mb-4">
                            <label for="role" class="form-label fw-bold required">Role</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-person-badge"></i></span>
                                <select class="form-select" id="role" name="role" required onchange="toggleProgramField()">
                                    <option value="" selected disabled>Choose role</option>
                                    <option value="student">Student</option>
                                    <option value="faculty">Faculty</option>
                                    <option value="admin">Admin</option>
                                </select>
                            </div>
                            <div class="invalid-feedback">Please choose role.</div>
                        </div>

                        <div class="mb-4" id="programField" style="display: none;">
                            <label for="schoolProgramId" class="form-label fw-bold required">School Program</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-mortarboard"></i></span>
                                <select class="form-select" id="schoolProgramId" name="schoolProgramId">
                                    <option value="" selected disabled>Choose school program</option>
                                    @if (ViewBag.SchoolPrograms != null)
                                    {
                                        @foreach (var program in ViewBag.SchoolPrograms)
                                        {
                                            <option value="@program.SchoolProgramId">@program.SchoolProgramName</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="invalid-feedback">Please choose school program.</div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-person-plus me-2"></i>Register
                            </button>
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left me-2"></i>Back
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .required::after {
            content: " *";
            color: red;
        }

        .card {
            border: none;
            border-radius: 10px;
        }

        .card-header {
            border-radius: 10px 10px 0 0 !important;
        }
    </style>
}

@section Scripts {
    <script>
        // Show/hide program field based on role
        function toggleProgramField() {
            var role = document.getElementById('role').value;
            var programField = document.getElementById('programField');
            var schoolProgramId = document.getElementById('schoolProgramId');

            if (role.toLowerCase() === 'student') {
                programField.style.display = 'block';
                schoolProgramId.setAttribute('required', 'required');
            } else {
                programField.style.display = 'none';
                schoolProgramId.removeAttribute('required');
            }
        }

        // Show/hide password
        document.getElementById('togglePassword').addEventListener('click', function () {
            var passwordField = document.getElementById('password');
            var icon = this.querySelector('i');

            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                icon.classList.remove('bi-eye');
                icon.classList.add('bi-eye-slash');
            } else {
                passwordField.type = 'password';
                icon.classList.remove('bi-eye-slash');
                icon.classList.add('bi-eye');
            }
        });

        // Check password confirmation
        document.getElementById('confirmPassword').addEventListener('input', function() {
            var password = document.getElementById('password').value;
            var confirmPassword = this.value;

            if (password !== confirmPassword) {
                this.setCustomValidity('Passwords do not match.');
            } else {
                this.setCustomValidity('');
            }
        });

        // Form validation
        (function () {
            'use strict'
            var forms = document.querySelectorAll('.needs-validation');

            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }

                    form.classList.add('was-validated');
                }, false);
            });
        })();
    </script>
}