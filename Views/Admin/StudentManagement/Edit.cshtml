@model SchoolManagementSystem.Models.StudentEditViewModel
@{
    ViewData["Title"] = "Edit Student";
}

<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
            <li class="breadcrumb-item"><a asp-controller="StudentManagement" asp-action="Index">Student Management</a></li>
            @* Display name only if Model is not null *@
            <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]: @(Model?.Username ?? "Unknown")</li>
        </ol>
    </nav>

    @* Check if Model is null before displaying the form *@
    @if (Model != null)
    {
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-7">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0"><i class="bi bi-pencil-fill me-2"></i>@ViewData["Title"]</h4>
                    </div>
                    <div class="card-body">
                        @* Display validation errors and TempData *@
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>
                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">@TempData["ErrorMessage"] <button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>
                        }

                        @* Ensure form points to the correct action and has route-id as StudentId *@
                        <form asp-action="Edit" asp-route-id="@Model.StudentId" method="post">
                            @Html.AntiForgeryToken()
                            @* Send UserId for Controller to know which user to update *@
                            <input type="hidden" asp-for="UserId" />
                            @* Send StudentId to check for matching and for binding *@
                            <input type="hidden" asp-for="StudentId" />

                            <div class="mb-3">
                                <label asp-for="StudentId" class="form-label fw-bold"></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-person-vcard"></i></span>
                                    @* Display StudentId readonly *@
                                    <input asp-for="StudentId" class="form-control bg-light" readonly />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label asp-for="Username" class="form-label fw-bold required"></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-person"></i></span>
                                    @* Input for Username *@
                                    <input asp-for="Username" class="form-control" />
                                </div>
                                <span asp-validation-for="Username" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="SchoolProgramId" class="form-label fw-bold required"></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-mortarboard"></i></span>
                                    @* Dropdown for SchoolProgramId, using ViewBag.SchoolProgramsList *@
                                    <select asp-for="SchoolProgramId" class="form-select" asp-items="@ViewBag.SchoolProgramsList">
                                        <option value="" selected disabled>-- Select school program --</option>
                                    </select>
                                </div>
                                <span asp-validation-for="SchoolProgramId" class="text-danger"></span>
                                @* Display error loading program list if any *@
                                @if (TempData["ErrorMessageLoading"] != null)
                                {
                                    <div class="text-danger small mt-1">@TempData["ErrorMessageLoading"]</div>
                                }
                            </div>

                            <div class="mb-3">
                                <label asp-for="Password" class="form-label fw-bold"></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-lock"></i></span>
                                    @* Input for new Password *@
                                    <input asp-for="Password" class="form-control" placeholder="Leave blank if you don't want to change" />
                                    <button class="btn btn-outline-secondary" type="button" id="togglePassword" title="Show/Hide password">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="Password" class="text-danger"></span>
                                <div class="form-text">New password must be at least 6 characters long (if changed).</div>
                            </div>

                            <hr />
                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <a asp-action="Index" class="btn btn-outline-secondary me-md-2">
                                    @* Cancel Button *@
                                    <i class="bi bi-x-circle me-1"></i> Cancel
                                </a>
                                <button type="submit" class="btn btn-danger">
                                    @* Save Button *@
                                    <i class="bi bi-save me-1"></i> Save
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger">Unable to load information for editing. Data not found.</div>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i> Back to List
        </a>
    }
</div>

@section Styles {
    <style>
        .required::after {
            content: " *";
            color: yellow;
        }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Script to show/hide password
        document.getElementById('togglePassword')?.addEventListener('click', function () {
             var passwordField = document.getElementById('Password');
             var icon = this.querySelector('i');
             var fieldType = passwordField.getAttribute('type');
             if (fieldType === 'password') {
                 passwordField.setAttribute('type', 'text');
                 icon.classList.remove('bi-eye'); icon.classList.add('bi-eye-slash');
             } else {
                 passwordField.setAttribute('type', 'password');
                 icon.classList.remove('bi-eye-slash'); icon.classList.add('bi-eye');
             }
         });

        // Script to handle Bootstrap validation
        (function () {
          'use strict'
          var forms = document.querySelectorAll('.needs-validation')
          Array.prototype.slice.call(forms)
            .forEach(function (form) {
              form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                  event.preventDefault()
                  event.stopPropagation()
                }
                form.classList.add('was-validated')
              }, false)
            })
        })();
    </script>
}